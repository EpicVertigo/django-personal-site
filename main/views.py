from django.contrib import messages
from django.contrib.auth import authenticate, login
from django.contrib.auth.mixins import LoginRequiredMixin
from django.contrib.auth.views import (FormView, LoginView, LogoutView,
                                       TemplateView)
from django.shortcuts import redirect
from django.urls import reverse, reverse_lazy
from django.views.generic.base import RedirectView

from discordbot.forms import WFSettingsForm
from main.forms import (DiscordProfileForm, DiscordTokenForm,
                        MainAuthenticationForm, MainUserCreationForm)


class HomeView(TemplateView):
    template_name = 'home.html'


class MainLoginView(LoginView):
    authentication_form = MainAuthenticationForm
    redirect_authenticated_user = True


class MainLogoutView(LogoutView):
    next_page = 'main:home'


class SignupView(FormView):
    form_class = MainUserCreationForm
    template_name = 'registration/signup.html'
    success_url = reverse_lazy('main:home')

    def get_success_url(self):
        if self.request.GET.get('next'):
            return self.request.GET.get('next')
        return super().get_success_url()

    def form_valid(self, form):
        form.save()
        username = form.cleaned_data.get('username')
        raw_password = form.cleaned_data.get('password1')
        user = authenticate(username=username, password=raw_password)
        login(self.request, user)
        return super().form_valid(form)


class DiscordLinkRequiredMixin(LoginRequiredMixin):
    """
    Mixin that checks if current User is linked to DiscordUser by checking
    it's attributes.
    """

    def dispatch(self, request, *args, **kwargs):
        if not hasattr(request.user, 'discorduser'):
            return redirect('main:discord_link')
        return super().dispatch(request, *args, **kwargs)


class ProfileView(DiscordLinkRequiredMixin, TemplateView):
    """
    General profile view with two forms - general settings for DiscordUser and
    Warframe settings. For now it requires User to be linked with DiscordUser
    instance.
    """
    login_url = '/login/'
    template_name = 'profile.html'
    success_messages = {
        'DiscordProfileForm': 'Profile settings has been updated',
        'WFSettingsForm': 'Warframe alerts settings has been updated',
    }

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        if not any([context.get(x) for x in ('profile_form', 'wf_settings_form')]):
            context.update({
                'profile_form': DiscordProfileForm(
                    user=self.request.user,
                    instance=self.request.user.discorduser
                ),
                'wf_settings_form': WFSettingsForm(
                    instance=self.request.user.discorduser.wf_settings
                ),
            })
        return context

    def post(self, request):
        profile_form = DiscordProfileForm(
            data=request.POST, user=request.user,
            instance=request.user.discorduser
        )
        wf_form = WFSettingsForm(
            data=request.POST,
            instance=request.user.discorduser.wf_settings
        )
        for form in (profile_form, wf_form):
            if form.has_changed() and form.is_valid():
                form.save(user=request.user)
                messages.add_message(
                    request=request,
                    level=messages.SUCCESS,
                    message=self.success_messages[form.__class__.__name__]
                )
        return self.render_to_response({
            'profile_form': profile_form,
            'wf_settings_form': wf_form,
        })


class DiscordLinkView(FormView):
    """
    View for linking current authenticated user with existing DiscordUser by
    passing token generated by Discord bot into form. In case user is already
    linked, he will be redirected to profile page. Token could also be passed
    as query parameter and User will be linked and redirected automatically
    """
    form_class = DiscordTokenForm
    template_name = 'discord_link.html'

    def get_success_url(self):
        return reverse_lazy('main:profile')

    def _autolink(self, token):
        class_form = self.get_form_class()
        form = class_form(data={'token': token})
        if form.is_valid():
            return self.form_valid(form)
        return self.form_invalid(form)

    def get(self, request, *args, **kwargs):
        if hasattr(request.user, 'discorduser'):
            return redirect('main:profile')
        if request.GET.get('token'):
            return self._autolink(request.GET.get('token'))
        return super().get(request, *args, **kwargs)

    def form_valid(self, form):
        form.link_discord_profile(self.request.user)
        return super().form_valid(form)


class DiscorUnlinkView(DiscordLinkRequiredMixin, RedirectView):
    """
    Opposite of DiscordLinkView, simply clears current User.discorduser instance
    """

    def get_redirect_url(self, *args, **kwargs):
        self.request.user.discorduser.user_id = None
        self.request.user.save()
        return reverse('main:home')
